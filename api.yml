# This is the OpenAPI specification for your service. It is used to generate the client code.
# To generate the server code, use the Gradle task `openApiGenerate`. The 
# generated code will be placed in `build/generate-resources/main`.
#
# We will evaluate you based on how well you design your API.
# 1. How well it follows REST principles.
# 2. How easy it is to understand and use.
#
# References
# 1. https://swagger.io/specification/
openapi: "3.0.0"
info:
  version: 1.0.0
  title: User Service
  license:
    name: MIT
servers:
  - url: http://localhost
paths:
  /user:
    post:
      summary: Endpoint to create new user
      operationId: userRegister
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: "#/components/schemas/Users"
      responses:
        '200':
          description: Success
          content:
            application/json:    
              schema:
                $ref: "#/components/schemas/CreateResponse"
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
    get:
      summary: This is endpoint to get user profile
      operationId: getUser
      responses:
        '200':
          description: return user object
          content:
            application/json:    
              schema:
                $ref: "#/components/schemas/UserResponse"
        '404':
          description: Not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
    put:
      summary: Endpoint to update user
      operationId: userUpdate
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: "#/components/schemas/UpdateUsers"
      responses:
        '200':
          description: Success
          content:
            application/json:    
              schema:
                $ref: "#/components/schemas/UserResponse"
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
  /login:
    post:
      summary: Endpoint to login
      operationId: login
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: "#/components/schemas/LoginInput"
      responses:
        '200':
          description: Success
          content:
            application/json:    
              schema:
                $ref: "#/components/schemas/LoginResponse"
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
components:
  schemas:
    Users:
      type: object
      properties:
        phoneNumber:
          type: string
          example: 08123342446
        fullName:
          type: string
          example: Fazar
        passwords:
          type: string
          example: password
    LoginInput:
      type: object
      properties:
        phoneNumber:
          type: string
          example: 08123342446
        passwords:
          type: string
          example: password
    UpdateUsers:
      type: object
      properties:
        phoneNumber:
          type: string
          example: 08123342446
        fullName:
          type: string
          example: Fazar
    CreateResponse:
      type: object
      required:
        - id
      properties:
        id:
          type: integer
          format: int64
    LoginResponse:
      type: object
      required:
        - id
        - accessToken
      properties:
        id:
          type: integer
          format: int64
        accessToken:
          type: string
    UserResponse:
      type: object
      required:
        - fullName
        - phoneNumber
      properties:
        fullName:
          type: string
        phoneNumber:
          type: string
    Response:
      type: object
      required:
        - message
      properties:
        message:
          type: string
    ErrorResponse:
      type: object
      required:
        - message
      properties:
        message:
          type: string
